#!/usr/bin/env python
import os, sys
import jinja2

environ = os.environ

def replace(template_location, output_location='-'):
	with open_file(template_location) as template:
		template = jinja2.Template(template.read())

	template.environment.undefined = jinja2.StrictUndefined

	with open_file(output_location, 'w') as output:
		print >> output, template.render(environ),

class open_file(object):
	def __init__(self, path, mode='r', silent=False):
		self.path = path
		self.silent = silent
		self.mode = mode
		if path == '-':
			self.__enter = self.__enter_stdin if mode == 'r' else self.__enter_stdout
			self.__exit = lambda *a: None
		else:
			self.__enter = self.__enter_file
			self.__exit = self.__exit_file

	def __enter__(self): return self.__enter()
	def __exit__(self, *a): return self.__exit()

	def __enter_file(self):
		self.__context = open(self.path, self.mode)
		return self.__context.__enter__()

	def __enter_stdin(self):
		try:
			if (not self.silent) and sys.stdin.isatty():
				print >> sys.stderr, "Warning: reading input from stdin"
		except AttributeError: pass
		return sys.stdin

	def __enter_stdout(self):
		return sys.stdout
	
	def __exit_file(self):
		self.__context.__exit__()


if __name__ == '__main__':
	import optparse
	parser = optparse.OptionParser("""Usage: %prog [OPTIONS] infile [outfile]\n       (use "-" for stdin / stdout)""")
	parser.add_option("-i", "--in-place", action='store_true', help="replace input file with output, like `sed -i`")
	parser.add_option("-y", "--yaml", help="use the given yaml file for values, as well as ENV")
	opts, args = parser.parse_args()
	args = args or ('-',)
	try:
		if opts.in_place:
			assert len(args) == 1 and args[0] != '-', "you must specify exactly one file for in-place mode"
			args = (args[0], args[0])

		if opts.yaml:
			import yaml
			with open(opts.yaml) as yaml_file:
				environ = os.environ.copy()
				environ.update(yaml.load(yaml_file))

		replace(*args)
	except KeyboardInterrupt: pass
	except AssertionError, e:
		print >> sys.stderr, "Error: %s" % (e,)
		sys.exit(1)

