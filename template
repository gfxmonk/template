#!/usr/bin/env python
from __future__ import print_function
import os, sys
import jinja2
import logging
LOGGER = logging.getLogger(__name__)

def replace(mapping, template_location, output_location='-'):
	LOGGER.debug("Using mapping: %r", mapping)
	LOGGER.debug("Reading template from %s" % (template_location))
	with open_file(template_location, 'rb') as template_file:
		template = jinja2.Template(template_file.read().decode('utf-8'))

	template.environment.undefined = jinja2.StrictUndefined

	contents = template.render(mapping)

	LOGGER.debug("Writing to %s", output_location)
	with open_file(output_location, 'wb') as output:
		output.write(contents.encode('utf-8'))

class InteractiveContext(jinja2.runtime.Context):
	def __init__(self, *a, **k):
		self.__responses = {}
		super(InteractiveContext, self).__init__(*a, **k)
	
	def __get(self, key):
		LOGGER.debug("Prompting for: %s" % (key,))
		if key not in self.__responses:
			self.__responses[key] = raw_input("Enter value for %r: " % (key,))
		return self.__responses[key]

	def resolve(self, key):
		"""Looks up a variable like `__getitem__` or `get` but returns an
		:class:`Undefined` object with the name of the name looked up.
		"""
		val = super(InteractiveContext, self).resolve(key)
		if isinstance(val, jinja2.Undefined):
			return self.__get(key)
		else:
			return val

class open_file(object):
	def __init__(self, path, mode='r', silent=False):
		self.path = path
		self.silent = silent
		self.mode = mode
		if path == '-':
			self.__enter = self.__enter_stdin if mode == 'r' else self.__enter_stdout
			self.__exit = lambda *a: None
		else:
			self.__enter = self.__enter_file
			self.__exit = self.__exit_file

	def __enter__(self): return self.__enter()
	def __exit__(self, *a): return self.__exit()

	def __enter_file(self):
		self.__context = open(self.path, self.mode)
		return self.__context.__enter__()

	def __enter_stdin(self):
		try:
			if (not self.silent) and sys.stdin.isatty():
				print("Warning: reading input from stdin", file=sys.stderr)
		except AttributeError: pass
		return sys.stdin

	def __enter_stdout(self):
		return sys.stdout
	
	def __exit_file(self):
		self.__context.__exit__()

def main():
	import optparse
	parser = optparse.OptionParser("""Usage: %prog [OPTIONS] infile [outfile]\n       (use "-" for stdin / stdout)\n        """)
	parser.add_option("-i", "--in-place", action='store_true', help="replace input file with output, like `sed -i`")
	parser.add_option('-p', '--prompt', action='store_true', help="Prompt for missing values interactively")
	parser.add_option("-y", "--yaml", help="use the given YAML file for values, instead of ENV")
	parser.add_option("-j", "--json", help="use the given JSON file for values, instead of ENV")
	parser.add_option("-e", "--env", help="allow ENV to override any JSON / YAML options given", action='store_true')
	parser.add_option('-v', '--verbose', help='verbose logging', action='store_true')
	opts, args = parser.parse_args()
	logging.basicConfig(level=logging.DEBUG if opts.verbose else logging.INFO)
	args = args or ('-',)

	if opts.in_place:
		assert len(args) == 1 and args[0] != '-', "you must specify exactly one file for in-place mode"
		args = (args[0], args[0])

	assert not(opts.yaml and opts.json), "Can't specify both YAML / JSON"

	environ = {}

	if opts.yaml:
		import yaml
		LOGGER.debug("Loading YAML from: %r", opts.yaml)
		with open(opts.yaml) as yaml_file:
			environ.update(yaml.safe_load(yaml_file))
	elif opts.json:
		try:
			import json
		except ImportError:
			LOGGER.debug("json module not available, trying simplejson...")
			import simplejson as json
		LOGGER.debug("Loading JSON from: %r", opts.json)
		with open(opts.json) as f:
			environ.update(json.load(f))

	if opts.env or not (opts.yaml or opts.json):
		LOGGER.debug("Using ENV")
		environ.update(os.environ)

	if opts.prompt:
		LOGGER.debug("Prompting for undefined values")
		jinja2.runtime.Context = InteractiveContext

	replace(environ, *args)

if __name__ == '__main__':
	try:
		main()
	except KeyboardInterrupt:
		sys.exit(2)
	except AssertionError as e:
		print("Error: %s" % (e,), file=sys.stderr)
		sys.exit(1)
